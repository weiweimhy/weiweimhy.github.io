[{"content":"hugo 安装和简单使用请查看上篇文档\n添加 stack 主题 在个人站点目录，执行如下命令以git子模块的模式来添加Stack\n1 2 3 4 5 6 7 8 # 添加主题 git submodule add https://github.com/CaiJimmy/hugo-theme-stack/ themes/hugo-theme-stack # 更新主题 git submodule update --remote # 查看主题版本号 git show 拉取完毕后，打开博客文件夹内的 theme/hugo-theme-stack/exampleSite，将文件夹内的 hugo.yaml 复制到站点根目录下，同时删除原有的 hugo.toml\n本地调试，就可以预览 stack 主题啦~\n自定义 stack 为了打造更符合自己心意的站点，可能需要diy很多配置，所以需要将主题的资源复制到个人站点\n1 2 3 4 5 xcopy themes\\hugo-theme-stack\\archetypes archetypes\\ /E /I xcopy themes\\hugo-theme-stack\\assets assets\\ /E /I xcopy themes\\hugo-theme-stack\\data data\\ /E /I xcopy themes\\hugo-theme-stack\\i18n i18n\\ /E /I xcopy themes\\hugo-theme-stack\\layouts layouts\\ /E /I 配置说明 hugo.yaml 字段说明：\nbaseurl 博客的URL languageCode 语言代码，例如zh-cn theme 主题 paginate 每页显示的文章数量 title 网站名称 copyright 网站底部的个性化说明 DefaultContentLanguage 默认显示的语言 hasCJKLanguage CJK字数统计，如果编码是 zh-cn，需要改成 true languages 多语言设置，如不需要只需要把别的多余的语言删除即可 services/googleAnalytics Google分析代码 params/favicon 站点logo params/footer/since 创建博客的年份 params/dateFormat/published 发布时间格式 params/dateFormat/lastUpdated 最后更新时间格式 params/sidebar/emoji 头像右下角的emoji params/sidebar/subtitle 位于头像下面的副标题 params/sidebar/avatar/src 头像图片位置，相对 assets/ 目录 menu/social 社交信息配置 使用表情 stack 已开启表情支持，可以在表情仓库查找需要的表情\n使用本地图片 Hugo 会根据你内容文件的路径以及 permalinks 配置来生成 URL 和文件夹结构\n例如：\n1 2 3 4 5 ├── post │ └── blog │ └── images │ └── test.png │ └── first.md 编译以后：\n1 2 3 4 5 6 7 8 ├── public │ └── p │ └── first │ └── index.html │ └── post │ └── blog │ └── images │ └── test.png 会导致本地图片的相对路径改变，所以在使用本地图片时应相对 content/ 路径\n在 first.md 中使用\n1 ![](/post/blog/images/test.png) 自定义小图标 打开 Tabler Icons ，搜索自己想要的图标，然后将 Size 拉到 24px ，再将 Stroke 拉到 2px\n然后单击所需要的图标，网站会会自动复制下这个图标的svg代码，然后在网站根目录下的assets/icons/文件夹内创建一个 .svg 文件，就可以在配置中使用啦~\n文章底部添加 在 GitHub 上编辑此页 拷贝主题目录 /layouts/partials/article/components/footer.html 到网站根目录，修改为：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 \u0026lt;footer class=\u0026#34;article-footer\u0026#34;\u0026gt; {{ partial \u0026#34;article/components/tags\u0026#34; . }} {{ if and (.Site.Params.article.license.enabled) (not (eq .Params.license false)) }} \u0026lt;section class=\u0026#34;article-copyright\u0026#34;\u0026gt; {{ partial \u0026#34;helper/icon\u0026#34; \u0026#34;copyright\u0026#34; }} \u0026lt;span\u0026gt;{{ default .Site.Params.article.license.default .Params.license | markdownify }}\u0026lt;/span\u0026gt; \u0026lt;/section\u0026gt; {{ end }} \u0026lt;!-- 在文章底部添加 github 编辑 --\u0026gt; {{ if and (.Site.Params.article.edit.enabled) (not (eq .Params.edit false)) }} \u0026lt;section class=\u0026#34;article-edit\u0026#34;\u0026gt; {{ partial \u0026#34;helper/icon\u0026#34; \u0026#34;brand-github\u0026#34; }} \u0026lt;span\u0026gt;\u0026lt;a style=\u0026#34;color: inherit;\u0026#34; href=\u0026#34;https://github.com/iwyang/iwyang.github.io/edit/develop/content/{{ replace .File.Path \u0026#34;\\\\\u0026#34; \u0026#34;/\u0026#34; }}\u0026#34; target=\u0026#34;_blank\u0026#34; rel=\u0026#34;noopener noreferrer\u0026#34;\u0026gt;在 GitHub 上编辑此页\u0026lt;/a\u0026gt;\u0026lt;/span\u0026gt; \u0026lt;/section\u0026gt; {{ end }} {{- if ne .Lastmod .Date -}} \u0026lt;section class=\u0026#34;article-lastmod\u0026#34;\u0026gt; {{ partial \u0026#34;helper/icon\u0026#34; \u0026#34;clock\u0026#34; }} \u0026lt;span\u0026gt; {{ T \u0026#34;article.lastUpdatedOn\u0026#34; }} {{ .Lastmod.Format ( or .Site.Params.dateFormat.lastUpdated \u0026#34;Jan 02, 2006 15:04 MST\u0026#34; ) }} \u0026lt;/span\u0026gt; \u0026lt;/section\u0026gt; {{- end -}} \u0026lt;/footer\u0026gt; 编辑 hugo.yaml\n1 2 3 4 5 6 7 8 9 10 article: math: false toc: true readingTime: true license: enabled: false default: Licensed under CC BY-NC-SA 4.0 edit: enabled: true # 开关控制 自动更新文章最后修改时间 修改 hugo.yaml,在最后添加如下配置\n1 2 3 4 5 6 7 8 9 frontmatter: # :git 文件提交修改时间 # :fileModTime：文件修改时间 # lastmod：文章里 lastmod 字段 # :defalut：默认时间 lastmod: [\u0026#34;:git\u0026#34;, \u0026#34;lastmod\u0026#34;, \u0026#34;:fileModTime\u0026#34;, \u0026#34;:defalut\u0026#34;] enableGitInfo: true gitRepo: \u0026#34;https://github.com/weiweimhy/MyBlog\u0026#34; 文章加入字数统计 修改 layouts\\partials\\article\\components\\details.html, 添加如下内容\n1 2 3 4 5 6 7 8 {{ if .Site.Params.article.wordCount }} \u0026lt;div\u0026gt; {{ partial \u0026#34;helper/icon\u0026#34; \u0026#34;pencil\u0026#34; }} \u0026lt;time class=\u0026#34;article-words\u0026#34;\u0026gt; {{ .WordCount }} 字 \u0026lt;/time\u0026gt; \u0026lt;/div\u0026gt; {{ end }} 在 hugo.yaml 打开开关\n1 2 article: wordCount: true 站点总字数统计 修改 layouts\\partials\\footer\\footer.html，添加如下内容\n1 2 3 4 5 6 7 8 9 10 {{$scratch := newScratch}} {{ range (where .Site.Pages \u0026#34;Kind\u0026#34; \u0026#34;page\u0026#34; )}} {{$scratch.Add \u0026#34;total\u0026#34; .WordCount}} {{ end }} \u0026lt;section class=\u0026#34;wordcount\u0026#34;\u0026gt; \u0026lt;p\u0026gt;{{ div ($scratch.Get \u0026#34;total\u0026#34;) 1000.0 | lang.FormatNumber 2 }}k 字 \u0026lt;br\u0026gt;{{ len (where .Site.RegularPages \u0026#34;Section\u0026#34; \u0026#34;post\u0026#34;) }}篇文章 \u0026lt;/p\u0026gt; \u0026lt;/section\u0026gt; 修改 \\assets\\scss\\partials\\footer.scss，添加如下内容\n1 2 3 4 .wordcount { color: var(--accent-color); margin-bottom: 5px; } 缩小归档页的分类卡片尺寸 默认的卡片有些太大了，修改 assets\\scss\\partials\\layout\\list.scss\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 .subsection-list { overflow-x: auto; .article-list--tile { display: flex; padding-bottom: 0px; article { width: 150px; height: 90px; margin-right: 5px; flex-shrink: 0; .article-title { margin: 0; font-size: 1.8rem; } .article-details { padding: 20px; } } } } 在文档列表显示内容简介 修改 assets\\scss\\partials\\article.scss\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 \u0026lt;div class=\u0026#34;article-details\u0026#34;\u0026gt; \u0026lt;h2 class=\u0026#34;article-title\u0026#34;\u0026gt; {{- .Title -}} \u0026lt;/h2\u0026gt; {{ with .Params.description }} \u0026lt;div class=\u0026#34;article-subtitle\u0026#34;\u0026gt; {{ . }} \u0026lt;/div\u0026gt; {{ end }} \u0026lt;footer class=\u0026#34;article-time\u0026#34;\u0026gt; \u0026lt;time datetime=\u0026#39;{{ .Date.Format \u0026#34;2006-01-02T15:04:05Z07:00\u0026#34; }}\u0026#39;\u0026gt; {{- .Date.Format (or .Site.Params.dateFormat.published \u0026#34;Jan 02, 2006\u0026#34;) -}} \u0026lt;/time\u0026gt; \u0026lt;/footer\u0026gt; \u0026lt;/div\u0026gt; 代码块样式 修改 assets\\scss\\partials\\layout\\article.scss\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 .highlight { background-color: var(--pre-background-color); padding: var(--card-padding); position: relative; \u0026amp;:hover { .copyCodeButton { opacity: 1; } } // keep Codeblocks LTR [dir=\u0026#34;rtl\u0026#34;] \u0026amp; { direction: ltr; } pre { margin: initial; padding: 0; margin: 0; width: auto; } } .copyCodeButton { position: absolute; top: 5px; right: 5px; background: var(--card-background); border: none; box-shadow: var(--shadow-l2); border-radius: var(--tag-border-radius); padding: 8px 16px; color: var(--card-text-color-main); cursor: pointer; font-size: 14px; opacity: 0; transition: opacity 0.3s ease; } /// Negative margins blockquote, figure, pre, .gallery, .video-wrapper, .table-wrapper, .s_video_simple { margin-left: calc((var(--card-padding)) * -1); margin-right: calc((var(--card-padding)) * -1); width: calc(100% + var(--card-padding) * 2); } .highlight { margin-left: 0; margin-right: 0; width: calc(100% - var(--card-padding) * 2); } ","date":"2024-08-19T15:28:43+08:00","permalink":"https://imhy.top/p/hugo-stack%E4%B8%BB%E9%A2%98%E4%BD%BF%E7%94%A8%E5%92%8C%E7%BE%8E%E5%8C%96%E9%85%8D%E7%BD%AE/","title":"Hugo Stack主题使用和美化配置"},{"content":"Hugo是由Go语言实现的静态网站生成器。简单、易用、高效、易扩展、快速部署。\n安装 hugo 有两个版本，标准版和扩展版，推荐使用扩展版。\n使用 scoop 安装\n1 scoop install hugo-extended 注意：*目前scoop版本过低，编译最新stack主题的时候会报错，所以推荐使用下面方法安装。\n下载二进制安装，github地址\na. 下载二进制版本 b. 解压文件 c. 配置环境变量\n查看 hugo 版本 扩展版可以在输出种看到 +extended 标识\n1 hugo version 显示可用命令 1 2 3 4 hugo help # 获取子指令的说明, 用 --help标志，例如： hugo server --help 新建站点 一个站点对应本地的一个文件夹，如：希望在 /site_path/site_name 路径创建一个站点\n1 hugo new site site_path/site_name 创建成功以后切换到对应路径\n1 cd site_path/site_name 可以看到如下文件结构\n1 2 3 4 5 6 7 8 9 10 11 site_name/ ├── archetypes/ 该目录包含新内容的模板，查看[详细资料](https://gohugo.io/content-management/archetypes/) │ └── default.md ├── assets/ 该目录包含通常通过资产管道传递的全局资源。这包括图像、CSS、Sass、JavaScript 和 TypeScript 等资源。查看[详细资料](https://gohugo.io/hugo-pipes/introduction/) ├── content/ 该目录包含标记文件（通常是 Markdown）和构成站点内容的页面资源。查看[详细资料](https://gohugo.io/content-management/organization/) ├── data/ 该目录包含数据文件（JSON、TOML、YAML 或 XML），用于增强内容、配置、本地化和导航。查看[详细资料](https://gohugo.io/content-management/data-sources/) ├── i18n/ 该目录包含多语言站点的翻译表。查看[详细资料](https://gohugo.io/content-management/multilingual/) ├── layouts/ layouts 目录包含用于将内容、数据和资源转换为完整网站的模板。查看[详细资料](https://gohugo.io/templates/) ├── static/ 该目录包含的文件将在您构建站点时复制到公共目录。例如：、 和验证站点所有权的文件。在引入页面捆绑包和资产管道之前，该目录还用于图像、CSS 和 JavaScript。 ├── themes/ 该目录包含一个或多个主题，每个主题都位于其自己的子目录中 └── hugo.toml 站点配置，可能分为多个子目录和文件。对于配置最少的项目或不需要在不同环境中表现不同的项目，在项目根目录中命名的单个配置文件就足够了。查看[详细资料](https://gohugo.io/getting-started/configuration/#configuration-directory) 新建文章 新建的文章会根据 archetypes/default.md 模板创建在 content/ 目录下\n1 hugo new path/test.md 本地调试 在发布文章之前，你可能希望在本地调试，在站点根路径执行 hugo 命令进行调试\n1 2 3 4 5 6 7 # 启动本地服务器 hugo server # --buildDrafts 包含草稿文章 hugo server --buildDrafts # or hugo server -D 在浏览器打开 http://localhost:1313 可查看生成的文章\n生成最终页面 将文章中的 draft 修改为 false\n1 2 3 4 hugo #开始代码压缩 hugo --minify 运行以后将在站点目录生成 public 目录，该目录包含生成的已发布网站。Hugo根据需要重新创建此目录及其内容。查看详细资料\n⚠️Hugo在构建站点前不会清空目录。 根据当前四个条件的评估结果，构建后你的目录可能包含来自以前构建的多余文件。通常的做法是在每次构建之前手动清空目录的内容以删除草稿、过期和未来的内容。\n所以推荐使用代参构建\n1 2 # 这个选项会在 Hugo 构建时清理生成目录中的内容，确保只有最新构建的文件保留 hugo --cleanDestinationDir 部署到 Github pages 手动部署 首先在 github 上创建一个名为 xxx.github.io 的 public 仓库（ xxx 为你个人 github 的用户名）。\n将 public 文件夹关联到刚创建的仓库\n1 2 3 4 5 6 7 cd public git init git remote add origin https://github.com/xxxx/xxxx.github.io.git git branch -M main git add . git commit -m \u0026#34;add test.md\u0026#34; git push -u origin master 之后可在浏览器访问 http://xxx.github.io 即可看到发布的文章\n手动部署需要每次修改文章编译后推送到 xxx.github.io 仓库，这样就需要手动管理两个目录，过于繁琐\n自动部署 仍然需要创建 xxx.github.io 仓库\n目前我们已经有两个仓库：\n私有库：MySite 公开库：xxxx.github.io 创建 Personal Access Token\nPersonal access tokens (PATs) are an alternative to using passwords for authentication to GitHub Enterprise Server when using the GitHub API or the command line.\n创建PAT的主要目的是给私有库访问目标库的权限，可以让私有 库的actions推送构建好的代码到目标库中去\n打开 github setting 界面 切换到 Developer settings 点击 Personal access tokens 点击 Tokens(classic) 勾选 workflow 和 write:packages 生成 PAT 复制 ghp_ 开头的 tokens 在私有库设置 Secret\n打开私有库 打开 settings 页面 添加 Secret，保持 Secret 名字，例如：SECERT_BLOG 在私有库创建 Action Workflow\n在 github 私有仓库页面，选择 Actions, 创建新的 workflow，在搜索中搜索 hugo, 并创建\n参照文档并作相应修改\nhugo-version：修改为本地 hugo 版本，可以通过 hugo version 查看 personal_token：修改为 ${{ secrets.XXX }}, XXX 是刚才在私有仓库设置的 SECRET 名字 external_repository：公共仓库地址 xxx/xxx.github.io 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 name: GitHub Pages on: push: branches: - main # Set a branch to deploy pull_request: jobs: deploy: runs-on: ubuntu-22.04 concurrency: group: ${{ github.workflow }}-${{ github.ref }} steps: - uses: actions/checkout@v4 with: submodules: true # Fetch Hugo themes (true OR recursive) fetch-depth: 0 # Fetch all history for .GitInfo and .Lastmod - name: Setup Hugo uses: peaceiris/actions-hugo@v3 with: hugo-version: \u0026#39;0.132.2\u0026#39; extended: true - name: Build run: hugo --minify --cleanDestinationDir - name: Deploy uses: peaceiris/actions-gh-pages@v3 if: github.ref == \u0026#39;refs/heads/main\u0026#39; with: personal_token: ${{ secrets.XXX }} publish_branch: main publish_dir: ./public external_repository: xxx/xxx.github.io cname: imhy.top 至此，自动部署已完成，每当 push 到 main 分支的时候，github 会自动生成并且部署到个人页面\n","date":"2024-08-19T12:03:33+08:00","permalink":"https://imhy.top/p/hugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/","title":"Hugo搭建个人博客"}]