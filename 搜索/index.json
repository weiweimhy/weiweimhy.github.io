[{"content":"小游戏更新机制 微信小游戏开发文档中写到\n未启动更新逻辑\n开发者在管理后台发布新版本的小程序之后，如果某个用户本地有小程序的历史版本，此时打开的可能还是旧版本。微信客户端会有若干个时机去检查本地缓存的小程序有没有更新版本，如果有则会静默更新到新版本。总的来说，开发者在后台发布新版本之后，无法立刻影响到所有现网用户，但最差情况下，也在发布之后 24 小时之内下发新版本信息到用户。用户下次打开时会先更新最新版本再打开\n启动时更新\n小程序每次冷启动时，都会检查是否有更新版本，如果发现有新版本，将会异步下载新版本的代码包，并同时用客户端本地的包进行启动，即新版本的小程序需要等下一次冷启动才会应用上\n小程序运行机制文档中指出，冷启动是指用户首次打开小游戏，或者小游戏被销毁再次打开，但是销毁时机并不是关闭小游戏🤡，需要等进入后台一定时间，或者系统资源占用过高，才会被销毁，可以用以下方式冷启动\n删除小游戏重新打开（不推荐） 关闭微信（杀掉后台）重新打开微信 立即更新 如果需要马上应用最新版本，可以使用 WX.GetUpdateManager API 进行处理\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 var updateManager = WX.GetUpdateManager(); updateManager.OnCheckForUpdate(res =\u0026gt; { // noting }); updateManager.OnUpdateFailed(res =\u0026gt; { // show error tips CanvasManager.Instance.Open\u0026lt;TipsUI, TipsUI.View\u0026gt;(true, failedText); callback.Invoke(false); }); updateManager.OnUpdateReady(res =\u0026gt; { // 新的版本已经下载好，调用 applyUpdate 应用新版本并重启 updateManager.ApplyUpdate(); }); ","date":"2024-08-23T11:09:00+08:00","permalink":"https://imhy.top/p/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E6%B8%B8%E6%88%8F%E7%89%88%E6%9C%AC%E5%8D%87%E7%BA%A7/","title":"微信小游戏版本升级"},{"content":"unity 开发微信小游戏，有一些常用功能，例如微信登录，微信支付，打开游戏圈，获取用户头像、名字等功能，查看对应的开发文档即可，但是在开发过程中还遇到一些坑，特此记录一下打开游戏圈和获取用户权限踩坑\n打开游戏圈 创建一个打开游戏圈的按钮，点击按钮跳转微信游戏圈\n1 2 3 4 5 6 7 8 9 10 11 12 13 var btn = WXBase.CreateGameClubButton(new WXCreateGameClubButtonParam() { type = GameClubButtonType.image, icon = GameClubButtonIcon.light, openlink = url, style = new GameClubButtonStyle() { left = left, top = top, width = w, height = h } }); 获取用户信息 获取用户信息之前，需要判断用户是否授权\n1 2 3 4 5 6 7 8 9 10 WX.GetSetting(new GetSettingOption() { success = (res) =\u0026gt; { var isAuth = res != null \u0026amp;\u0026amp; res.authSetting.ContainsKey(\u0026#34;scope.userInfo\u0026#34;) \u0026amp;\u0026amp; res.authSetting[\u0026#34;scope.userInfo\u0026#34;]; callback.Invoke(isAuth); } }); 如果已经授权，便可直接读取用户信息\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 WX.GetUserInfo(new GetUserInfoOption() { success = (res) =\u0026gt; { if (res == null || res.userInfo == null) { callback.Invoke(null, null); return; } var name = res.userInfo.nickName; var avatar = res.userInfo.avatarUrl; callback.Invoke(name, avatar); }, fail = (res) =\u0026gt; { callback.Invoke(null, null); } }); 如果未授权，需要调用微信插件提供的CreateUserInfoButton方法创建一个透明按钮，用户点击按钮，会弹出授权弹框，所以最好将按钮覆盖在功能按钮上，例如打开排行榜需要读取用户头像，用户还未授权，就应该将透明按钮覆盖在排行榜按钮上\n1 2 3 4 5 6 7 8 9 10 11 12 13 var btn = WXBase.CreateUserInfoButton(left, top, w, h, \u0026#34;zh_CN\u0026#34;, false); btn.OnTap((res) =\u0026gt; { // 拒绝授权 if (res.errCode != 0) { callback.Invoke(null, null); return; } callback.Invoke(res.userInfo.nickName, res.userInfo.avatarUrl); btn.Hide(); }); 小技巧 因为授权按钮是透明的，很不好调试，在微信开发者工具中，鼠标移动到授权按钮的时候，鼠标会从暗示圈变成箭头\n坑点 创建游戏圈按钮和授权按钮，都需要指定按钮的位置\nleft 相对屏幕左上角的 x 坐标 top 相对屏幕左上角的 y 坐标 width 按钮宽度 height 按钮高度 区别：\nCreateGameClubButton 创建游戏圈按钮，是相对于逻辑分辨率，需要通过 GetSystemInfoOption 获取\n1 2 3 4 5 6 7 8 9 WX.GetSystemInfo(new GetSystemInfoOption() { success = (info) =\u0026gt; { var dpr = info.pixelRatio; var width = info.screenWidth; var height = info.screenHeight; } }); CreateUserInfoButton 创建授权按钮，是相对于物理分辨率，在 unity 中通过 Screen.width 和 Screen.height 获得物理分辨率\n分辨率区别 物理分辨率：物理设备真实的像素点，例如iphone 14 pro max, 物理分辨率 1290*2796 逻辑分辨率：为了抹平物理分辨率的差异，更好的做界面适配，在物理分辨率上层抽象出来的一个概念，例如iphone 14 pro max，逻辑分辨率 430*932 物理分辨率和逻辑分辨率的比值，即 Dpr=物理分辨率/逻辑分辨率，iphone 14 pro max 的 Dpr = 3\n","date":"2024-08-23T09:59:22+08:00","permalink":"https://imhy.top/p/%E6%89%93%E5%BC%80%E6%B8%B8%E6%88%8F%E5%9C%88%E5%92%8C%E8%8E%B7%E5%8F%96%E7%94%A8%E6%88%B7%E4%BF%A1%E6%81%AF/","title":"打开游戏圈和获取用户信息"},{"content":"any any 类型表示没有任何限制，该类型的变量可以赋予任意类型的值\n从集合论的角度看，any类型可以看成是所有其他类型的全集，包含了一切可能的类型。TypeScript 将这种类型称为“顶层类型”（top type），意为涵盖了所有下层\n1 2 3 4 5 let x:any; x = 1; x = \u0026#34;hello\u0026#34;; x = false; 变量类型一旦设为any，TypeScript 实际上会关闭这个变量的类型检查。即使有明显的类型错误，只要句法正确，都不会报错\n1 2 3 4 let x:any = \u0026#39;hello\u0026#39;; x(1) // 不报错 x.foo = 100; // 不报错 由于这个原因，应该尽量避免使用any类型，否则就失去了使用 TypeScript 的意义\n实际开发中，any类型主要适用以下两个场合:\n出于特殊原因，需要关闭某些变量的类型检查，就可以把该变量的类型设为any 为了适配以前老的 JavaScript 项目，让代码快速迁移到 TypeScript，可以把变量类型设为any。有些年代很久的大型 JavaScript 项目，尤其是别人的代码，很难为每一行适配正确的类型，这时你为那些类型复杂的变量加上any，TypeScript 编译时就不会报错 注意：any 存在污染问题，使用any，将关闭类型检测，所以any可以赋值给其他任何类型\n1 2 3 4 5 6 7 let x:any = \u0026#39;hello\u0026#39;; let y:number; y = x; // 不报错 y * 123 // 不报错 y.toFixed() // 不报错 unknown 为了解决any类型“污染”其他变量的问题，TypeScript 3.0 引入了unknown类型\n它与any含义相同，表示类型不确定，可能是任意类型，但是它的使用有一些限制，不像any那样自由，可以视为严格版的any。\nunknown跟any的相似之处，在于所有类型的值都可以分配给unknown类型，但是unknown不能赋值给任何类型，也不能直接调用unknown类型变量的方法和属性\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 let x:unknown; x = true; // 正确 x = 42; // 正确 x = \u0026#39;Hello World\u0026#39;; // 正确 let v:unknown = 123; let v1:boolean = v; // 报错 let v2:number = v; // 报错 let v1:unknown = { foo: 123 }; v1.foo // 报错 let v2:unknown = \u0026#39;hello\u0026#39;; v2.trim() // 报错 let v3:unknown = (n = 0) =\u0026gt; n + 1; v3() // 报错 unknown类型变量能够进行的运算是有限的，只能进行比较运算（运算符==、===、!=、!==、||、\u0026amp;\u0026amp;、?）、取反运算（运算符!）、typeof运算符和instanceof运算符这几种\n1 2 3 4 let a:unknown = 1; a + 1 // 报错 a === 1 // 正确 never 为了保持与集合论的对应关系，以及类型运算的完整性，TypeScript 还引入了“空类型”的概念，即该类型为空，不包含任何值\nnever变量不能赋值，但是可以赋值给其他任何类型\n1 2 3 4 5 6 7 8 9 10 11 12 let x：never; //正确 let a:never = 1; // 报错 let y:number = x; // 报错 function f():never { throw new Error(\u0026#39;Error\u0026#39;); } let v1:number = f(); // 正确 let v2:string = f(); // 正确 let v3:boolean = f(); // 正确 总结 any和unknown相同点:\n可以赋值任何类型 类型收窄以后可能进行对应类型的操作 any和unknown不同点：\nunknown 变量不能赋值给其他变量 不能访问 unknown 的属性 unknown 的变量只能进行 比较运算（== 、===、!= 、!== ）逻辑运算（！、\u0026amp;\u0026amp; 、|| 、？） typeof 和 instanceof，其他运算会报错 顶层类型:（可以承接任何类型）\nany unknown 底层类型:(可以赋值给任何类型)\nnever ","date":"2024-08-21T15:27:36+08:00","permalink":"https://imhy.top/p/anyunknown%E5%92%8Cnever%E7%B1%BB%E5%9E%8B/","title":"Any、unknown和never类型"},{"content":"Unity导出 Android Apk 非常方便，但当游戏使用大量的第三方 SDK 时，导出 APK 就很容易达到 Android 方法数 65536 的限制\n开发环境 Unity 2018.4.9，使用Gradle构建 Android Project/Apk\n注：Unity 5.x 开始支持使用 aar 文件，Unity 5.4 开始支持 Gradle Android minSdkVersion 16 MultiDex 使用 MultiDex的使用需要修改 Gradle 配置文件，Unity 开启 Gradle build 后 Gradle 配置文件路径 *Assets/Plugins/Android/mainTemplate.gradle*\n开启MultiDex支持\n1 2 3 4 5 6 7 8 9 android { defaultConfig { ... minSdkVersion 21 targetSdkVersion 28 multiDexEnabled true } ... } 特殊处理\nAndroid 5.0(21) 之前平台版本使用Dalvik运行时来执行应用代码， Dalvik将应用限制每个Apk只能使用一个classes.dex字节码文件。\nAndroid 5.0(21) 以及更高的版本使用ART的运行时，它本身支持从Apk文件加载多个dex文件。\n当 Android minSdkVersion版本低于 Android 5（21），需要做如下处理：\n添加依赖\n1 2 3 dependencies { implementation \u0026#39;androidx.multidex:multidex:2.0.1\u0026#39; } 如果项目未使用 AndroidX, 需要改为添加\n1 2 3 dependencies { implementation \u0026#39;com.android.support:multidex:1.0.3\u0026#39; } 修改Application\n需要修改 Assets/Plugins/Android/AndroidManifest.xml，在\u0026lt;application\u0026gt;标记中的 android：name改为如下所示：\n1 2 3 4 5 6 \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;utf-8\u0026#34;?\u0026gt; \u0026lt;manifest xmlns:android=\u0026#34;http://schemas.android.com/apk/res/android\u0026#34; package=\u0026#34;xxxx.xxxx.com\u0026#34;\u0026gt; \u0026lt;application android:name=\u0026#34;android.support.multidex.MultiDexApplication\u0026#34; \u0026gt; ... \u0026lt;/application\u0026gt; \u0026lt;/manifest\u0026gt; 参见 更多文档说明，请参见Google MultiDex 使用说明\n","date":"2024-08-21T15:18:16+08:00","permalink":"https://imhy.top/p/unity-%E4%BD%BF%E7%94%A8-multidex-%E5%BA%93/","title":"Unity 使用 MultiDex 库"},{"content":"Git 新特性 Git 2.23\ngit switch：简化了分支切换操作，取代了 git checkout 的一部分功能 git restore：提供了一个新的命令用于恢复文件状态，代替 git checkout 和 - git reset 的一些功能 git rebase --rebase-merges：保留变基过程中的合并提交 Git 2.24\ngit sparse-checkout：允许用户只检出仓库的一部分内容，节省磁盘空间和提高操作效率。 git commit --fixup 和 --squash：在交互式变基中用于标记修复或合并提交。 git log --format：提供了更灵活的日志格式选项。 Git 2.25\ngit switch 和 git restore 的增强：进一步改进了这两个命令的功能和稳定性。 git log --graph --oneline：改进了图形化日志的显示。 Git 2.26\ngit restore --source：允许指定恢复内容的源。 git stash：增强了 git stash 的功能，支持对未跟踪文件的操作。 Git 2.27\ngit commit --verbose：在提交时显示变更的详细信息。 git diff 的增强：改进了 diff 显示，增加了 \u0026ndash;color-words 选项。 Git 2.28\ngit config 的 includeIf 选项：允许根据不同条件包括配置文件。 git remote：增强了远程管理功能，支持更多的配置选项。 Git 2.29\ngit diff 的 --inter-hunk-context 选项：增强了 diff 输出的上下文显示功能。 git pull 的 --rebase：改进了拉取操作的变基选项。 Git 2.30\ngit commit 的 --no-verify：在提交时跳过钩子验证。 git merge 的 --rerere-autoupdate：增强了合并冲突的自动解决功能。 Git 2.31\ngit log 的 --notes 选项：允许在日志中显示附加的注释。 git switch --orphan：创建一个新的孤立分支，方便从空白状态开始。 Git 2.32\ngit commit --dry-run：提供了一个预查看提交的选项。 git diff 的 --stat 选项：改进了统计信息的显示。 Git 2.33\ngit branch 的 --show-current：显示当前分支的简化命令。 git log 的 --merges：更好地显示合并提交。 Git 2.34\ngit rebase 的 --exec 选项：在每个变基操作后执行指定命令。 git status 的 --short 选项：简化状态显示。 Git 覆盖所有提交 git 没有提供直接指令覆盖所有提交，但是在某些场合下，我们可能有这个需求，例如：从某个克隆仓库修改\n思路：\n创建一个独立分支 初始化仓库 删除 main 分支 将新分支修改为 main 强制提交 1 2 3 4 5 6 git checkout --orphan temp_branch git add . git commit -m \u0026#34;init\u0026#34; git branch -D main git branch -m temp_branch main git push -f ogigin main 注意：此过程不能撤销，请三思！\n问题和解决 git status 不能显示中文 在默认设置下，中文文件名在工作区状态输出，中文名不能正确显示，而是显示为八进制的字符编码\n解决办法：\n1 git config --global core.quotepath false ","date":"2024-08-20T16:39:37+08:00","permalink":"https://imhy.top/p/git-%E7%9A%84%E4%BD%BF%E7%94%A8%E5%92%8C%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/","title":"Git 的使用和相关问题"},{"content":"hugo 安装和简单使用请查看上篇文档\n添加 stack 主题 在个人站点目录，执行如下命令以git子模块的模式来添加Stack\n1 2 3 4 5 6 7 8 # 添加主题 git submodule add https://github.com/CaiJimmy/hugo-theme-stack/ themes/hugo-theme-stack # 更新主题 git submodule update --remote # 查看主题版本号 git show 拉取完毕后，打开博客文件夹内的 theme/hugo-theme-stack/exampleSite，将文件夹内的 hugo.yaml 复制到站点根目录下，同时删除原有的 hugo.toml\n为了打造更符合自己心意的站点，可能需要diy很多配置，所以需要将主题的资源复制到个人站点\n1 2 3 4 5 xcopy themes\\hugo-theme-stack\\archetypes archetypes\\ /E /I xcopy themes\\hugo-theme-stack\\assets assets\\ /E /I xcopy themes\\hugo-theme-stack\\data data\\ /E /I xcopy themes\\hugo-theme-stack\\i18n i18n\\ /E /I xcopy themes\\hugo-theme-stack\\layouts layouts\\ /E /I 配置说明 hugo.yaml 字段说明：\nbaseurl 博客的URL languageCode 语言代码，例如zh-cn theme 主题 paginate 每页显示的文章数量 title 网站名称 copyright 网站底部的个性化说明 DefaultContentLanguage 默认显示的语言 hasCJKLanguage CJK字数统计，如果编码是 zh-cn，需要改成 true languages 多语言设置，如不需要只需要把别的多余的语言删除即可 services/googleAnalytics Google分析代码 params/favicon 站点logo params/footer/since 创建博客的年份 params/dateFormat/published 发布时间格式 params/dateFormat/lastUpdated 最后更新时间格式 params/sidebar/emoji 头像右下角的emoji params/sidebar/subtitle 位于头像下面的副标题 params/sidebar/avatar/src 头像图片位置，相对 assets/ 目录 menu/social 社交信息配置 使用表情 stack 已开启表情支持，可以在表情仓库查找需要的表情\n使用本地图片 Hugo 会根据你内容文件的路径以及 permalinks 配置来生成 URL 和文件夹结构\n例如：\n1 2 3 4 5 ├── post │ └── blog │ └── images │ └── test.png │ └── first.md 编译以后：\n1 2 3 4 5 6 7 8 ├── public │ └── p │ └── first │ └── index.html │ └── post │ └── blog │ └── images │ └── test.png 会导致本地图片的相对路径改变，所以在使用本地图片时应相对 content/ 路径\n在 first.md 中使用\n1 ![](/post/blog/images/test.png) 自定义小图标 打开 Tabler Icons ，搜索自己想要的图标，然后将 Size 拉到 24px ，再将 Stroke 拉到 2px\n然后单击所需要的图标，网站会会自动复制下这个图标的svg代码，然后在网站根目录下的assets/icons/文件夹内创建一个 .svg 文件，就可以在配置中使用啦~\n文章底部添加 在 GitHub 上编辑此页 拷贝主题目录 assets\\layouts\\partials\\article\\components\\footer.html 到网站根目录，修改为：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 \u0026lt;footer class=\u0026#34;article-footer\u0026#34;\u0026gt; {{ partial \u0026#34;article/components/tags\u0026#34; . }} {{ if and (.Site.Params.article.license.enabled) (not (eq .Params.license false)) }} \u0026lt;section class=\u0026#34;article-copyright\u0026#34;\u0026gt; {{ partial \u0026#34;helper/icon\u0026#34; \u0026#34;copyright\u0026#34; }} \u0026lt;span\u0026gt;{{ default .Site.Params.article.license.default .Params.license | markdownify }}\u0026lt;/span\u0026gt; \u0026lt;/section\u0026gt; {{ end }} \u0026lt;!-- 在文章底部添加 github 编辑 --\u0026gt; {{ if and (.Site.Params.article.edit.enabled) (not (eq .Params.edit false)) }} \u0026lt;section class=\u0026#34;article-edit\u0026#34;\u0026gt; {{ partial \u0026#34;helper/icon\u0026#34; \u0026#34;brand-github\u0026#34; }} \u0026lt;span\u0026gt;\u0026lt;a style=\u0026#34;color: inherit;\u0026#34; href=\u0026#34;https://github.com/iwyang/iwyang.github.io/edit/develop/content/{{ replace .File.Path \u0026#34;\\\\\u0026#34; \u0026#34;/\u0026#34; }}\u0026#34; target=\u0026#34;_blank\u0026#34; rel=\u0026#34;noopener noreferrer\u0026#34;\u0026gt;在 GitHub 上编辑此页\u0026lt;/a\u0026gt;\u0026lt;/span\u0026gt; \u0026lt;/section\u0026gt; {{ end }} {{- if ne .Lastmod .Date -}} \u0026lt;section class=\u0026#34;article-lastmod\u0026#34;\u0026gt; {{ partial \u0026#34;helper/icon\u0026#34; \u0026#34;clock\u0026#34; }} \u0026lt;span\u0026gt; {{ T \u0026#34;article.lastUpdatedOn\u0026#34; }} {{ .Lastmod.Format ( or .Site.Params.dateFormat.lastUpdated \u0026#34;Jan 02, 2006 15:04 MST\u0026#34; ) }} \u0026lt;/span\u0026gt; \u0026lt;/section\u0026gt; {{- end -}} \u0026lt;/footer\u0026gt; 编辑 hugo.yaml\n1 2 3 4 5 6 7 8 9 10 article: math: false toc: true readingTime: true license: enabled: false default: Licensed under CC BY-NC-SA 4.0 edit: enabled: true # 开关控制 自动更新文章最后修改时间 修改 hugo.yaml,在最后添加如下配置\n1 2 3 4 5 6 7 8 9 frontmatter: # :git 文件提交修改时间 # :fileModTime：文件修改时间 # lastmod：文章里 lastmod 字段 # :defalut：默认时间 lastmod: [\u0026#34;:git\u0026#34;, \u0026#34;lastmod\u0026#34;, \u0026#34;:fileModTime\u0026#34;, \u0026#34;:defalut\u0026#34;] enableGitInfo: true gitRepo: \u0026#34;https://github.com/weiweimhy/MyBlog\u0026#34; 文章加入字数统计 修改 layouts\\partials\\article\\components\\details.html, 添加如下内容\n1 2 3 4 5 6 7 8 {{ if .Site.Params.article.wordCount }} \u0026lt;div\u0026gt; {{ partial \u0026#34;helper/icon\u0026#34; \u0026#34;pencil\u0026#34; }} \u0026lt;time class=\u0026#34;article-words\u0026#34;\u0026gt; {{ .WordCount }} 字 \u0026lt;/time\u0026gt; \u0026lt;/div\u0026gt; {{ end }} 在 hugo.yaml 打开开关\n1 2 article: wordCount: true 站点总字数统计 修改 layouts\\partials\\footer\\footer.html，添加如下内容\n1 2 3 4 5 6 7 8 9 10 {{$scratch := newScratch}} {{ range (where .Site.Pages \u0026#34;Kind\u0026#34; \u0026#34;page\u0026#34; )}} {{$scratch.Add \u0026#34;total\u0026#34; .WordCount}} {{ end }} \u0026lt;section class=\u0026#34;wordcount\u0026#34;\u0026gt; \u0026lt;p\u0026gt;{{ div ($scratch.Get \u0026#34;total\u0026#34;) 1000.0 | lang.FormatNumber 2 }}k 字 \u0026lt;br\u0026gt;{{ len (where .Site.RegularPages \u0026#34;Section\u0026#34; \u0026#34;post\u0026#34;) }}篇文章 \u0026lt;/p\u0026gt; \u0026lt;/section\u0026gt; 修改 \\assets\\scss\\partials\\footer.scss，添加如下内容\n1 2 3 4 .wordcount { color: var(--accent-color); margin-bottom: 5px; } 缩小归档页的分类卡片尺寸 默认的卡片有些太大了，修改 assets\\scss\\partials\\layout\\list.scss\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 .subsection-list { overflow-x: auto; .article-list--tile { display: flex; padding-bottom: 0px; article { width: 150px; height: 90px; margin-right: 5px; flex-shrink: 0; .article-title { margin: 0; font-size: 1.8rem; } .article-details { padding: 20px; } } } } 在首页文件列表显示内容简介 在首页文件列表显示内容简介，但是在文档页隐藏简介\n修改 assets\\layouts\\partials\\article-list\\default.html, 添加\n1 2 3 4 5 6 7 {{ with .Params.description }} \u0026lt;div class=\u0026#34;article-subtitle-wrapper\u0026#34;\u0026gt; \u0026lt;h3 class=\u0026#34;article-subtitle\u0026#34;\u0026gt; {{ . }} \u0026lt;/h3\u0026gt; \u0026lt;/div\u0026gt; {{ end }} 修改 assets\\scss\\custom.scss, 添加\n1 2 3 4 5 6 7 8 9 .article-subtitle-wrapper { padding-left: var(--card-padding); padding-right: var(--card-padding); padding-bottom: var(--card-padding); } .article-time { padding-top: 5PX } 删除 layouts\\partials\\article\\components\\details.html 中的 article-subtitle\n在归档列表显示内容简介 修改 assets\\layouts\\partials\\article-list\\compact.html\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 \u0026lt;div class=\u0026#34;article-details\u0026#34;\u0026gt; \u0026lt;h2 class=\u0026#34;article-title\u0026#34;\u0026gt; {{- .Title -}} \u0026lt;/h2\u0026gt; {{ with .Params.description }} \u0026lt;div class=\u0026#34;article-subtitle\u0026#34;\u0026gt; {{ . }} \u0026lt;/div\u0026gt; {{ end }} \u0026lt;footer class=\u0026#34;article-time\u0026#34;\u0026gt; \u0026lt;time datetime=\u0026#39;{{ .Date.Format \u0026#34;2006-01-02T15:04:05Z07:00\u0026#34; }}\u0026#39;\u0026gt; {{- .Date.Format (or .Site.Params.dateFormat.published \u0026#34;Jan 02, 2006\u0026#34;) -}} \u0026lt;/time\u0026gt; \u0026lt;/footer\u0026gt; \u0026lt;/div\u0026gt; 代码块样式 修改边距 背景框添加圆角 调整 copy 按钮位置 修改 assets\\scss\\partials\\layout\\article.scss, 在文件尾添加\n1 2 3 4 5 6 7 8 9 10 11 .highlight { margin-left: 0; margin-right: 0; width: calc(100%); border-radius: var(--card-border-radius); } .copyCodeButton { top: 5px; right: 5px; } ","date":"2024-08-19T15:28:43+08:00","permalink":"https://imhy.top/p/hugo-stack%E4%B8%BB%E9%A2%98%E4%BD%BF%E7%94%A8%E5%92%8C%E7%BE%8E%E5%8C%96%E9%85%8D%E7%BD%AE/","title":"Hugo Stack主题使用和美化配置"},{"content":"Hugo是由Go语言实现的静态网站生成器。简单、易用、高效、易扩展、快速部署。\n安装 hugo 有两个版本，标准版和扩展版，推荐使用扩展版。\n使用 scoop 安装\n1 scoop install hugo-extended 注意：*目前scoop版本过低，编译最新stack主题的时候会报错，所以推荐使用下面方法安装。\n下载二进制安装，github地址\na. 下载二进制版本 b. 解压文件 c. 配置环境变量\n查看 hugo 版本 扩展版可以在输出种看到 +extended 标识\n1 hugo version 显示可用命令 1 2 3 4 hugo help # 获取子指令的说明, 用 --help标志，例如： hugo server --help 新建站点 一个站点对应本地的一个文件夹，如：希望在 /site_path/site_name 路径创建一个站点\n1 hugo new site site_path/site_name 创建成功以后切换到对应路径\n1 cd site_path/site_name 可以看到如下文件结构\n1 2 3 4 5 6 7 8 9 10 11 site_name/ ├── archetypes/ 该目录包含新内容的模板，查看[详细资料](https://gohugo.io/content-management/archetypes/) │ └── default.md ├── assets/ 该目录包含通常通过资产管道传递的全局资源。这包括图像、CSS、Sass、JavaScript 和 TypeScript 等资源。查看[详细资料](https://gohugo.io/hugo-pipes/introduction/) ├── content/ 该目录包含标记文件（通常是 Markdown）和构成站点内容的页面资源。查看[详细资料](https://gohugo.io/content-management/organization/) ├── data/ 该目录包含数据文件（JSON、TOML、YAML 或 XML），用于增强内容、配置、本地化和导航。查看[详细资料](https://gohugo.io/content-management/data-sources/) ├── i18n/ 该目录包含多语言站点的翻译表。查看[详细资料](https://gohugo.io/content-management/multilingual/) ├── layouts/ layouts 目录包含用于将内容、数据和资源转换为完整网站的模板。查看[详细资料](https://gohugo.io/templates/) ├── static/ 该目录包含的文件将在您构建站点时复制到公共目录。例如：、 和验证站点所有权的文件。在引入页面捆绑包和资产管道之前，该目录还用于图像、CSS 和 JavaScript。 ├── themes/ 该目录包含一个或多个主题，每个主题都位于其自己的子目录中 └── hugo.toml 站点配置，可能分为多个子目录和文件。对于配置最少的项目或不需要在不同环境中表现不同的项目，在项目根目录中命名的单个配置文件就足够了。查看[详细资料](https://gohugo.io/getting-started/configuration/#configuration-directory) 新建文章 新建的文章会根据 archetypes/default.md 模板创建在 content/ 目录下\n1 hugo new path/test.md 本地调试 在发布文章之前，你可能希望在本地调试，在站点根路径执行 hugo 命令进行调试\n1 2 3 4 5 6 7 # 启动本地服务器 hugo server # --buildDrafts 包含草稿文章 hugo server --buildDrafts # or hugo server -D 在浏览器打开 http://localhost:1313 可查看生成的文章\n生成最终页面 将文章中的 draft 修改为 false\n1 2 3 4 hugo #开始代码压缩 hugo --minify 运行以后将在站点目录生成 public 目录，该目录包含生成的已发布网站。Hugo根据需要重新创建此目录及其内容。查看详细资料\n⚠️Hugo在构建站点前不会清空目录。 根据当前四个条件的评估结果，构建后你的目录可能包含来自以前构建的多余文件。通常的做法是在每次构建之前手动清空目录的内容以删除草稿、过期和未来的内容。\n所以推荐使用代参构建\n1 2 # 这个选项会在 Hugo 构建时清理生成目录中的内容，确保只有最新构建的文件保留 hugo --cleanDestinationDir 部署到 Github pages 手动部署 首先在 github 上创建一个名为 xxx.github.io 的 public 仓库（ xxx 为你个人 github 的用户名）。\n将 public 文件夹关联到刚创建的仓库\n1 2 3 4 5 6 7 cd public git init git remote add origin https://github.com/xxxx/xxxx.github.io.git git branch -M main git add . git commit -m \u0026#34;add test.md\u0026#34; git push -u origin master 之后可在浏览器访问 http://xxx.github.io 即可看到发布的文章\n手动部署需要每次修改文章编译后推送到 xxx.github.io 仓库，这样就需要手动管理两个目录，过于繁琐\n自动部署 仍然需要创建 xxx.github.io 仓库\n目前我们已经有两个仓库：\n私有库：MySite 公开库：xxxx.github.io 创建 Personal Access Token\nPersonal access tokens (PATs) are an alternative to using passwords for authentication to GitHub Enterprise Server when using the GitHub API or the command line.\n创建PAT的主要目的是给私有库访问目标库的权限，可以让私有 库的actions推送构建好的代码到目标库中去\n打开 github setting 界面 切换到 Developer settings 点击 Personal access tokens 点击 Tokens(classic) 勾选 workflow 和 write:packages 生成 PAT 复制 ghp_ 开头的 tokens 在私有库设置 Secret\n打开私有库 打开 settings 页面 添加 Secret，保持 Secret 名字，例如：SECERT_BLOG 在私有库创建 Action Workflow\n在 github 私有仓库页面，选择 Actions, 创建新的 workflow，在搜索中搜索 hugo, 并创建\n参照文档并作相应修改\nhugo-version：修改为本地 hugo 版本，可以通过 hugo version 查看 personal_token：修改为 ${{ secrets.XXX }}, XXX 是刚才在私有仓库设置的 SECRET 名字 external_repository：公共仓库地址 xxx/xxx.github.io 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 name: GitHub Pages on: push: branches: - main # Set a branch to deploy pull_request: jobs: deploy: runs-on: ubuntu-22.04 concurrency: group: ${{ github.workflow }}-${{ github.ref }} steps: - uses: actions/checkout@v4 with: submodules: true # Fetch Hugo themes (true OR recursive) fetch-depth: 0 # Fetch all history for .GitInfo and .Lastmod - name: Setup Hugo uses: peaceiris/actions-hugo@v3 with: hugo-version: \u0026#39;0.132.2\u0026#39; extended: true - name: Build run: hugo --minify --cleanDestinationDir - name: Deploy uses: peaceiris/actions-gh-pages@v3 if: github.ref == \u0026#39;refs/heads/main\u0026#39; with: personal_token: ${{ secrets.XXX }} publish_branch: main publish_dir: ./public external_repository: xxx/xxx.github.io cname: imhy.top 至此，自动部署已完成，每当 push 到 main 分支的时候，github 会自动生成并且部署到个人页面\n","date":"2024-08-19T12:03:33+08:00","permalink":"https://imhy.top/p/hugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/","title":"Hugo搭建个人博客"},{"content":"Windows Terminal 是一个现代化、多标签的终端应用程序，专为使用命令行工具（如 PowerShell、命令提示符、Windows Subsystem for Linux 以及其他命令行界面）设计。它提供了许多强大且灵活的功能，并且可以替代经典的命令提示符和 PowerShell 窗口\n安装 在 Mixrosoft商店 获取 Windows Terminal\n在 github 发布页下载最新版本安装\n使用 scoop 安装（推荐）， 如果未安装 scoop , 请查看这篇文章\n先安装 powershell, 此 powershell 不是自带的 powershell，应该是 powershell core，可跨平台\n1 2 3 scoop install powershell scoop install windows-terminal 使用 winget 安装\n常用快捷键 Ctrl + Shift + T 新建标签页 Ctrl + Tab 切换标签页 Alt + Shift + + 右分屏 Alt + Shift + - 下分屏 也可以在 settings.json 中配置自己的快捷键。例如，添加打开新的 PowerShell 标签的快捷键：\n1 2 3 4 5 6 7 \u0026#34;keybindings\u0026#34;: [ { \u0026#34;command\u0026#34;: \u0026#34;newTab\u0026#34;, \u0026#34;keys\u0026#34;: \u0026#34;ctrl+shift+p\u0026#34;, \u0026#34;profile\u0026#34;: \u0026#34;PowerShell\u0026#34; } ] 美化 配置字体 下载等宽字体，推荐使用 CascadiaCodePL ,下载地址\n打开 windows terminal , shift+ctrl+, 快捷键打开设置 setting.json\n将 profiles/defaults 节点改成\n1 2 3 4 5 6 7 8 \u0026#34;defaults\u0026#34;: { \u0026#34;font\u0026#34;: { \u0026#34;face\u0026#34;: \u0026#34;Cascadia Code PL\u0026#34;, \u0026#34;size\u0026#34;: 10.0 } }, 配置 oh-my-posh oh-my-posh 官方文档\n安装\n1 2 3 4 5 6 7 8 9 # scoop 安装 scoop install https://github.com/JanDeDobbeleer/oh-my-posh/releases/latest/download/oh-my-posh.json # scoop 更新 scoop update oh-my-posh # winget 安装 winget install JanDeDobbeleer.OhMyPosh -l D:\\oh-my-posh # winget 更新 winget upgrade JanDeDobbeleer.OhMyPosh -l D:\\oh-my-posh 注意：目前使用 scoop 安装的文件有问题，缺少必须的 oh-my-posh.exe 文件和 theme 文件，推荐使用 winget 安装\n配置 oh-my-posh\n下载主题\n主题预览\n主题仓库\n选择喜欢的主题，将对于的 json 文件保存在本地， 我的路径是 D:\\Tools\\oh-my-posh\\theme，后面在配置文件中要使用\n推荐两个主题 powerlevel10k_lean cobalt2\n配置\n1 2 3 4 5 # 检测是否有配置文件，没有则创建 if (!(Test-Path -Path $PROFILE )) { New-Item -Type File -Path $PROFILE -Force } # 用 vscode 打开配置文件 code $PROFILE 添加如下内容：\n1 2 3 4 5 6 7 8 9 10 11 #全新的主题, 注意修改此处路径 oh-my-posh init pwsh --config D:\\Tools\\oh-my-posh\\themes\\powerlevel10k_lean.omp.json | Invoke-Expression # 自动补全历史命令，逐字补全 Import-Module PSReadLine Set-PSReadLineOption -PredictionSource History #修改Tab补全为bash风格 Set-PSReadlineKeyHandler -Key Tab -Function MenuComplete cls 更舒适的 Terminal 在 $profile 增加一些通用方法\n增加代理的开启管理 1 2 3 4 5 6 7 # 开启代理 默认使用 http://127.0.0.1:1080 proxy-on # 设置代理地址 proxy-on http:127.0.0.1:1080 # 关闭代理 proxy-off 增加 Open 方法，打开文件夹 1 2 3 4 5 # 打开当前文件夹 open . # 打开指定文件夹 open \u0026lt;path\u0026gt; 增加设置环境变量方法 1 2 # 设置环境变量，u表示为当前用户设置，m表示为本机设置 set-env \u0026lt;key\u0026gt; \u0026lt;value\u0026gt; [u/m] 用 autohotkey 打开时切换到 ~ 目录 用 autohotkey 时，默认会打开 autohotkey 配置所在目录\n我的配置文件 文件下载\n","date":"2024-08-19T12:02:22+08:00","permalink":"https://imhy.top/p/windows-terminal%E4%BD%BF%E7%94%A8/","title":"Windows Terminal使用"},{"content":"Windows 系统安装应用改的方式有很多，在 Microsoft 商店安装，下载应用安装包安装，使用包管理器(Package Manager)安装等，使用包管理器，使得软件的安装、更新和管理更加高效和便捷\nPackage Manager Package Manager 的优点 自动化和简化\n自动化安装：通过包管理器可以自动下载、安装和配置软件，省去手动下载安装和配置的麻烦。 一键更新：可以快速更新系统中所有已安装的软件包，确保软件始终保持最新状态。 批量管理：可以通过脚本或命令批量安装、更新或卸载软件，提高效率。 一致性和可重复性\n一致的安装体验：包管理器提供统一的命令和流程，确保所有软件的安装过程一致。 可重复性：通过配置文件或脚本，可以轻松地在不同的系统上复现相同的软件环境，特别适合开发和测试场景。 版本控制\n版本控制：许多包管理器允许你指定软件的版本，确保使用兼容的版本或回退到之前的版本。 历史记录：可以查看软件的安装历史和更新记录，帮助跟踪软件的变更。 依赖管理\n自动处理依赖：包管理器会自动处理软件的依赖关系，确保所有必需的组件都被安装和配置正确。 解决冲突：包管理器会处理软件之间的冲突，避免手动解决依赖问题。 安全性\n官方源和签名：许多包管理器从官方源或经过验证的源下载软件，减少恶意软件的风险。 更新安全补丁：定期更新软件，确保及时获取安全补丁，减少系统漏洞的风险。 便捷性和集成\n命令行操作：提供命令行工具，方便在终端中进行操作，适合高级用户和自动化脚本。 集成开发环境：一些包管理器（如 winget）与 Windows 的开发工具集成，提供更好的开发体验。 社区支持\n广泛的软件库：包管理器通常拥有丰富的软件库，提供了大量可用的软件包和工具。 社区维护：开源包管理器（如 Chocolatey 和 Scoop）拥有活跃的社区支持，可以快速获取帮助和解决问题。 减少人工干预\n减少人为错误：通过自动化的安装和管理过程，减少因人为操作失误带来的问题。 简化配置：自动配置和设置选项，简化软件配置过程，特别是对于复杂的软件。 跨平台支持\n多平台兼容：某些包管理器（如 Nix）支持跨平台使用，能够在不同操作系统上提供一致的包管理体验。 Windows 平台的 Package Manager windows 平台的包管理器主要有 Scoop Chocolatey Winget\nScoop 优点：\n简单易用：Scoop 专注于简化安装和管理，特别适合开发人员和高级用户。 不需要管理员权限：大多数操作不需要管理员权限，适合在没有管理员权限的环境中使用。 轻量级：Scoop 使用简单的 JSON 配置文件和命令行工具，易于使用和维护。 透明性：所有安装的程序和配置都存储在用户目录中，易于备份和管理。 支持多版本：可以轻松安装不同版本的软件包，支持版本管理。 缺点：\n功能有限：相对于其他包管理器，Scoop 的功能较为基础，缺少某些高级特性。 软件源较少：默认的软件源不如 Chocolatey 或 winget 丰富，但可以通过添加自定义源来扩展。 依赖管理较弱：Scoop 的依赖管理较为基础，可能需要手动解决某些软件的依赖问题。 Chocolatey 优点：\n功能全面：支持广泛的软件包，并提供了许多管理功能，包括安装、升级和卸载。 大型软件库：Chocolatey 拥有一个庞大的软件包库，涵盖了各种应用程序和工具。 良好的依赖管理：处理软件依赖关系，自动安装和更新依赖项。 社区支持：活跃的社区提供了丰富的包和支持。 缺点：\n需要管理员权限：大多数操作需要管理员权限，这可能在某些环境中受限。 复杂的配置：相对于 Scoop，Chocolatey 的配置和管理可能更复杂。 软件源问题：某些包的版本可能不如预期最新，尤其是社区维护的包。 Winget 优点：\n官方支持：由 Microsoft 提供和支持，集成在 Windows 10 和 Windows 11 中，保证了兼容性和安全性。 现代化：具有现代化的界面和功能，支持从 Microsoft Store 和第三方源安装软件。 简单易用：提供直观的命令行接口，易于使用和理解。 集成：与 Windows 系统和其他 Microsoft 工具集成良好，提供一致的用户体验。 缺点：\n功能有限：相较于 Chocolatey，winget 的功能和包管理特性还不够丰富。 软件库较新：虽然不断增加，但相比于 Chocolatey，winget 的软件库还不够庞大。 依赖管理弱：目前对依赖关系的管理不如 Chocolatey 强大。 结合自己的需求，选择合理的包管理器。\nScoop 是一款绿色软件（通过解压压缩包就可以使用的软件），更符合我的需求，所以我选择 Scoop\n使用 Scoop 安装 Scoop 先决条件\nPowerShell 最新版本或 Windows PowerShell 5.1，为了让 PowerShell 可以执行脚本，需要设置 PowerShell 执行策略，需要执行下面的命令：\n1 Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser 推荐安装方式\n1 2 3 4 irm get.scoop.sh -outfile \u0026#39;install.ps1\u0026#39; # 注意设置安装目录，ScoopDir存放当前用户软件，ScoopGlobalDir存放全局软件 .\\install.ps1 -ScoopDir \u0026#39;D:\\Applications\\Scoop\u0026#39; -ScoopGlobalDir \u0026#39;F:\\GlobalScoopApps\u0026#39; -NoProxy 更多安装方式请查看官方文档\nScoop 目录说明 apps：所有通过scoop安装的软件都在里面 buckets：管理软件的仓库，用于记录哪些软件可以安装、更新等信息，默认添加main仓库，主要包含无需GUI的软件，可手动添加其他仓库或自建仓库，具体在推荐软件仓库中介绍 cache：软件下载后安装包暂存目录 persit：用于储存一些用户数据，不会随软件更新而替换 shims：用于软链接应用，使应用之间不会互相干扰，实际使用过程中无用户操作不必细究 Scoop 常用命令 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 # 查看帮助 scoop --help # 查看命令帮助 scoop \u0026lt;command\u0026gt; --help # 查看scoop版本和仓库版本 scoop --version # 设置代理 scoop config proxy 127.0.0.1:1080 # 搜索应用 scoop search \u0026lt;app_name\u0026gt; # 安装应用 scoop install \u0026lt;app_name\u0026gt; # 卸载应用 scoop uninstall \u0026lt;app_name\u0026gt; # 更新所有仓库以及 scoop 软件本身 scoop update # 更新应用 scoop update \u0026lt;app_name\u0026gt; # 更新全部应用 scoop update * # 列出已安装应用 scoop list # 锁定软件阻止其更新 scoop hold \u0026lt;app_name\u0026gt; # 应用简要信息 scoop info \u0026lt;app_name\u0026gt; # 进入应用官网 scoop home \u0026lt;app_name\u0026gt; # 添加仓库 scoop bucket add \u0026lt;源名称\u0026gt; \u0026lt;源URL\u0026gt; # 删除仓库 scoop bucket rm \u0026lt;源名称\u0026gt; # 清理未使用的应用 scoop cleanup # 查看缓存 scoop cache list # 显示缓存信息 scoop cache status # 清理缓存 scoop cache cleanup # 导出当前列表到一个文件 scoop export \u0026gt; \u0026lt;file_name\u0026gt; # 从文件导入安装列表 scoop import \u0026lt;file_name\u0026gt; # 查看scoop配置 scoop config # 充值scoop scoop reset autohotkey使用 # 号代表 Win 键 ! 号代表 Alt 键 ^ 号代表 Ctrl 键 + 号代表 shift 键 :: 号(两个英文冒号)起分隔作用 run 非常常用 的 AHK 命令之一，打开网站或者应用 ; 号代表 注释后面一行内容 我的 autohotkey 配置下载\nWinGet 使用 Scoop 是一款“绿色”软件，有一定的局限性，对于一些大型或者权限要求比较多的软件并不适用，对于此类软件推荐使用 WinGet 安装\n安装 WinGet 在 Microsoft 商店安装 获取安装 在 github 发布页下载最新版本安装 使用 Scoop 安装（推荐） 常用命令 winget 的使用和 scoop 类似\n注意：\n1 2 3 4 5 # -l 指定安装路径，前提是安装包本身支持修改安装路径 winget install -l \u0026lt;app_name\u0026gt; # -i 进入交互模式安装 winget install -i \u0026lt;app_name\u0026gt; 安装包安装 对于一些不常用软件，无法通过包管理器下载的，请务必到官方网站下载安装包，在安装流程中，注意修改安装路径和反选捆绑安装\n推荐应用 推荐一些 scoop 安装的应用\naria2 sudo vscode windows-terminal 7zip adb apktool autohotkey beyondcompare calibre-normal ccleaner charles everything foxit-pdf-reader goldendict potplayer sharex wox 我的 scoop 列表下载\n","date":"2024-08-19T12:01:28+08:00","permalink":"https://imhy.top/p/windows%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85%E5%8F%8A%E6%8E%A8%E8%8D%90/","title":"windows软件安装及推荐"},{"content":"下载官方镜像(.iso) windows11 官方下载地址, 选择对应iso以后按照提示选择即可下载\nwindows10 官方下载地址, 此页面没有提供下载iso地址，需要修改浏览器UA\nchrome:\n打开开发者工具（F12） More Tools -\u0026gt; Network conditions User agent 修改为 BlackBerry-BB10 edge:\n打开开发者工具（F12） 在底部选择网络条件 将 用户代理 修改为 BlackBerry-BB10 修改UA以后刷新页面，即可选择对应的iso下载\n重装系统 下载 WinPE 制作U盘启动工具，U盘需要格式化 将 windows 镜像放到电脑非系统盘或者直接放到U盘 重启电脑进入 bios 选择U盘启动 在 WinPE 中选择系统镜像安装 ","date":"2024-08-19T12:01:13+08:00","permalink":"https://imhy.top/p/windows%E9%87%8D%E8%A3%85%E7%B3%BB%E7%BB%9F/","title":"Windows重装系统"},{"content":"WSL (Windows Subsystem for Linux) 是一个微软开发的工具，允许用户在 Windows 系统上直接运行 Linux 二进制可执行文件。这意味着你可以在 Windows 上运行一个完整的 Linux 环境，而无需虚拟机或双启动配置\n主要功能 直接在 Windows 上运行 Linux 环境：你可以运行 Linux 发行版（如 Ubuntu、Debian、Kali 等），-无需虚拟机 双操作系统体验：能够访问 Linux 的大多数命令行工具（如 Bash、Git、SSH）以及应用程序，同时保留对 Windows 文件系统的完全访问权限 开发环境：方便开发人员在 Windows 上使用 Linux 工具链进行开发，比如 Web 开发、数据科学等 两个版本的 WSL WSL1：传统的 WSL 版本，轻量级，直接将 Linux 调用映射到 Windows 的内核。WSL 1 的优点是它的启动速度快，适用于文件操作较多的任务 WSL2：引入了完整的 Linux 内核，带来了更好的性能和完全的 Linux 内核兼容性。它使用虚拟机技术（轻量级的虚拟机），提高了 I/O 性能，并且支持 Docker 等工具 推荐使用 WSL2\n安装 便捷安装 使用 wsl 命令安装，官方说明文档\n必须运行 Windows 10 版本 2004 及更高版本（内部版本 19041 及更高版本）或 Windows 11 才能使用以下命令\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 # 安装ubuntu wsl --install # 查看可下载的 linux 发行版 wsl --list --online wsl -l -o # 安装指定发行版 wsl --install -d \u0026lt;Distribution Name\u0026gt; # 查看运行版本 wsl -l -v # 设置版本 wsl --set-default-version 1 wsl --set-default-version 2 # 删除linux wsl --unregister \u0026lt;Distribution Name\u0026gt; 手动安装 开启\u0026quot;虚拟机平台\u0026quot;\n1 dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart 重启计算机\n下载 wsl2 内核更新包\n设置 wsl 版本\n1 wsl --set-default-version 2 安装 linux 发行版，链接 配置 Wsl 设置 root 1 sudo passwd root 设置代理 1 2 3 export http_proxy=http://127.0.0.1:1080 export https_proxy=http://127.0.0.1:1080 Terminal 美化 使用 ohmyzsh 美化 Terminal，github文档\n安装 zsh\n1 sudo apt-get install zsh 安装 oh-my-zsh\n1 2 3 4 5 6 7 git clone https://github.com/robbyrussell/oh-my-zsh.git ~/.oh-my-zsh cp ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc source ~/.zshrc chsh -s /bin/zsh 配置主题\n编辑 ~/.zshrc 文件，设置 powerlevel10k 主题\n1 git clone --depth=1 https://github.com/romkatv/powerlevel10k.git ~/.oh-my-zsh/themes/powerlevel10k 所有的主题都保存在 ~/.oh-my-zsh/themes，可查看修改\n1 ZSH_THEME=\u0026#34;powerlevel10k/powerlevel10k\u0026#34; 应用生效\n1 source ~/.zshrc 查看当前主题\n1 echo $ZSH_THEME 插件\n所有的插件都保存在 ~/.oh-my-zsh/plugins\n编辑 ~/.zshrc 文件，使用插件\n1 plugins=(git zsh-syntax-highlighting) 如果要安装第三方的插件，编辑 ~/.zshrc 文件，添加\n1 source \u0026lt;/path/to/plugin\u0026gt; ","date":"2024-08-19T12:01:13+08:00","permalink":"https://imhy.top/p/wsl%E4%BD%BF%E7%94%A8/","title":"Wsl使用"}]